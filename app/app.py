import streamlit as st

# Base packages
import pandas as pd
import numpy as np
import datetime
import altair as alt
import matplotlib.pyplot as plt

# Plot static maps
import cartopy.crs as ccrs
import cartopy.feature as cfeature

# Plot interactive maps
import geopandas as gpd
from shapely import wkt
from bokeh.io import output_notebook, show, output_file
from bokeh.plotting import figure
from bokeh.models import GeoJSONDataSource, ColumnDataSource
import json
from bokeh.models import HoverTool

import math
from scipy.optimize import curve_fit
import plotly.express as px

langue = st.sidebar.radio("Langue: ", ["Fran√ßais", "Wolof"])

if langue == "Fran√ßais":

    st.header("COVID-19 au S√©n√©gal üá∏üá≥")

    st.sidebar.markdown("*Derni√®re mise √† jour: 02/04/2020*")
    st.sidebar.markdown("---")
    st.sidebar.header("Ressources utiles")

    st.sidebar.markdown("Num√©ro d'urgence 1: **78 172 10 81**")
    st.sidebar.markdown("Num√©ro d'urgence 2: **76 765 97 31**")
    st.sidebar.markdown("Num√©ro d'urgence 3: **70 717 14 92**")
    st.sidebar.markdown("Num√©ro Vert du Minist√®re: **800 00 50 50**")
    st.sidebar.markdown("Samu: **1515**")
    st.sidebar.markdown("Service USSD: **#2121#**")
    st.sidebar.markdown("[Testez vos symptomes sur Prevcovid19](http://www.prevcovid19.com/#/teste)")
    st.sidebar.markdown("[Tweets du Minist√®re de la Sant√©](https://twitter.com/MinisteredelaS1)")
    st.sidebar.markdown("[Base de donn√©es et code de l'application](https://github.com/maelfabien/COVID-19-Senegal)")
    st.sidebar.markdown("---")

    st.sidebar.header("Contacter le Minist√®re")

    st.sidebar.markdown("Minist√®re de la sant√© et de l'Action Sociale / Fann R√©sidence")
    st.sidebar.markdown("Rue Aim√© C√©saire, Dakar, S√©n√©gal")
    st.sidebar.markdown("+221 800 00 50 50 - contact@sante.gouv.sn")

    st.sidebar.markdown("---")
    st.sidebar.markdown("By [Ma√´l Fabien](https://maelfabien.github.io/), [Papa Sega](https://github.com/papasega/), [Dakar Institute of Technology](https://dit.sn/)")

    # I. Dataframe

    df = pd.read_csv("COVID_Senegal.csv", sep=";")
    df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)

    #st.write(df)

    evol_cases = df[['Date', 'Positif', 'Negatif', 'D√©c√©d√©', 'Gu√©ri']].groupby("Date").sum().cumsum()

    st.subheader("En bref")

    total_positif = evol_cases.tail(1)['Positif'][0]
    total_negatif = evol_cases.tail(1)['Negatif'][0]
    total_decede = evol_cases.tail(1)['D√©c√©d√©'][0]
    total_geuri = evol_cases.tail(1)['Gu√©ri'][0]

    st.markdown("Nombre de malades: <span style='font-size:1.5em;'>%s</span>"%(total_positif - total_geuri), unsafe_allow_html=True)
    st.markdown("Nombre de d√©c√®s: <span style='font-size:1.5em;'>%s</span>"%(total_decede), unsafe_allow_html=True)
    st.markdown("Nombre de gu√©risons: <span style='font-size:1.5em;'>%s</span>"%(total_geuri), unsafe_allow_html=True)
    st.markdown("Pourcentage de guerison: <span style='font-size:1.5em;'>%s</span>"%(np.round(total_geuri / total_positif * 100, 1)), unsafe_allow_html=True)
    st.markdown("Taux de croissance journalier liss√© sur les 2 derniers jours: <span style='font-size:1.5em;'>%s</span>"%(np.round(pd.DataFrame(np.sqrt(evol_cases['Positif'].pct_change(periods=2)+1)-1).tail(1)['Positif'][0] * 100, 2)), unsafe_allow_html=True)
    st.markdown("Nombre total de cas positifs: <span style='font-size:1.5em;'>%s</span>"%(total_positif), unsafe_allow_html=True)
    st.markdown("Nombre de tests negatifs: <span style='font-size:1.5em;'>%s</span>"%(total_negatif), unsafe_allow_html=True)
    st.markdown("Nombre de tests r√©alis√©s: <span style='font-size:1.5em;'>%s</span>"%(total_positif + total_negatif), unsafe_allow_html=True)
    st.markdown("Pourcentage de tests positifs: <span style='font-size:1.5em;'>%s</span>"%(np.round(total_positif / (total_positif + total_negatif) * 100, 1)), unsafe_allow_html=True)


    # II. Map
    st.markdown("---")
    st.subheader("Carte des cas positifs")
    shapefile = 'app/ne_110m_admin_0_countries.shp'

    #Read shapefile using Geopandas
    gdf = gpd.read_file(shapefile)[['ADMIN', 'ADM0_A3', 'geometry']]
    gdf.columns = ['country', 'country_code', 'geometry']
    gdf = gdf[gdf['country']=="Senegal"]
    grid_crs=gdf.crs
    gdf_json = json.loads(gdf.to_json())
    grid = json.dumps(gdf_json)

    cities = pd.read_csv("city_coordinates.csv", index_col=0)

    def find_lat(x):
        try:
            return float(cities[cities['Ville'] == x]['Latitude'])
        except TypeError:
            return None

    def find_long(x):
        try:
            return float(cities[cities['Ville'] == x]['Longitude'])
        except TypeError:
            return None

    summary = df[['Positif', 'Ville']].groupby("Ville").sum().reset_index()
    summary['latitude'] = summary['Ville'].apply(lambda x: find_lat(x))
    summary['longitude'] = summary['Ville'].apply(lambda x: find_long(x))

    geosource = GeoJSONDataSource(geojson = grid)
    pointsource = ColumnDataSource(summary)

    hover = HoverTool(
        tooltips = [('Ville', '@Ville'), ('Nombre de cas positifs (au moins)', '@Positif')]
    )

    #Create figure object.
    p = figure(plot_height = 550 , plot_width = 700, tools=[hover, 'pan', 'wheel_zoom'])
    p.xgrid.grid_line_color = None
    p.ygrid.grid_line_color = None
    p.xaxis.visible = False
    p.yaxis.visible = False
    p.outline_line_color = None

    patch = p.patches('xs','ys', source = geosource, fill_color = '#fff7bc',
              line_color = 'black', line_width = 0.35, fill_alpha = 1, 
                    hover_fill_color="#fec44f")

    #Add patch renderer to figure. 
    patch = p.patches('xs','ys', source = geosource, fill_color = 'lightgrey',
              line_color = 'black', line_width = 0.25, fill_alpha = 1)

    p.circle('longitude','latitude',source=pointsource, size=15)

    st.bokeh_chart(p)

    # III. Map
    st.markdown("---")
    st.subheader("Evolution du nombre de cas positifs au S√©n√©gal")

    st.write("La courbe 'Positif' repr√©sente l'ensemble des cas, et la courbe 'Actifs' √©limine les cas gu√©ris et repr√©sente le nombre de cas actifs.")
    evol_cases['Actifs'] = evol_cases['Positif'] - evol_cases['Gu√©ri']

    #highlight = alt.selection(type='single', on='mouseover',fields=['value'], nearest=True)

    #chart = alt.Chart(evol_cases.reset_index()).mark_line(point=True, strokeWidth=5).encode(x='Date:T', y='Actifs:Q', tooltip='Actifs:Q').add_selection(highlight).properties(height=400, width=700)

    #chart2 = alt.Chart(evol_cases.reset_index()).mark_line(point=True, strokeWidth=5).encode(x='Date:T',y='Positif:Q',tooltip='Positif:Q').properties(height=400, width=700)


    ch0 = alt.Chart(evol_cases.reset_index()).transform_fold(
        ['Positif', 'Actifs'],
    ).mark_line(size=5, point=True).encode(
        x='Date:T',
        y='value:Q',
        color='key:N', 
        tooltip="value:Q"
    ).properties(height=400, width=700)

    st.write(ch0)
    #altair_chart(ch0)

    #st.write((chart + chart2).interactive())

    st.markdown("---")
    st.subheader("Comparaison avec les Pays-Bas")

    st.write("Le S√©n√©gal a une taille de population similaire aux Pays-Bas (¬±16 millions), et m√™me si beaucoup d'√©l√©ments rendent la comparaison tr√®s difficile, cela peut servir de base de r√©flexion. La progression semble, d'apr√®s les cas recens√©s, plus lente pour le moment au S√©n√©gal qu'aux Pays-Bas. Il aura fallu 7 jours aux Pays-Bas contre 18 au S√©n√©gal pour arriver au cap de 80 malades. Les chiffres des Pays-Bas sont automatiquement extraits de cet article Wikipedia: https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_the_Netherlands")

    df_nl = pd.read_csv("df_nl.csv")

    plt.figure(figsize=(16,10))
    plt.plot(df_nl['Netherlands'], linestyle="--", linewidth=5, label="Pays-Bas")
    plt.plot(df_nl['Senegal'],label="S√©n√©gal", linewidth=5)
    plt.figtext(.5,.9,'Evolution des cas au S√©n√©gal et aux Pays-Bas', fontsize=30, ha='center')
    plt.legend()
    st.pyplot(plt)

    # IV. Contamination
    st.markdown("---")
    st.subheader("Contamination")

    st.write("Nous distinguon les cas import√©s (voyageurs en provenance de l'ext√©rieur) des cas contact qui ont √©t√© en contact avec une personne malade. Les cas Communaut√© sont des cas dont les contacts directs ne peuvent √™tre √©tablis, et donc les plus dangereux.")

    facteur = df[['Date', 'Facteur']].dropna()
    facteur['Count'] = 1

    st.write("Nombre total de cas import√©s: ", facteur[facteur['Facteur'] == "Import√©"].groupby("Date").sum().sum()[0])
    st.write("Nombre total de cas contact: ", facteur[facteur['Facteur'] == "Contact"].groupby("Date").sum().sum()[0])
    st.write("Nombre total de cas communaut√©: ", facteur[facteur['Facteur'] == "Communaut√©"].groupby("Date").sum().sum()[0])

    importe = facteur[facteur['Facteur'] == "Import√©"].groupby("Date").sum().cumsum().reset_index()
    voyage = facteur[facteur['Facteur'] == "Contact"].groupby("Date").sum().cumsum().reset_index()
    communaute = facteur[facteur['Facteur'] == "Communaut√©"].groupby("Date").sum().cumsum().reset_index()

    df_int = pd.merge(importe, voyage, left_on='Date', right_on='Date', how='outer')
    df_int = pd.merge(df_int, communaute, left_on='Date', right_on='Date', how='outer')

    df_int['Date'] = pd.to_datetime(df_int['Date'], dayfirst=True)
    df_int = df_int.sort_values("Date").ffill().fillna(0)
    df_int.columns = ["Date", "Importes", "Contact", "Communaut√©"]

    ch0 = alt.Chart(df_int).transform_fold(
        ['Importes', 'Contact', 'Communaut√©'],
    ).mark_line(size=5).encode(
        x='Date:T',
        y='value:Q',
        color='key:N'
    ).properties(height=500, width=700)

    st.altair_chart(ch0)

    st.write("Les cas import√©s, ayant ensuite cr√©e des cas contact, proviennent des pays suivants:")

    ch3 = alt.Chart(df.dropna(subset=['Source/Voyage'])).mark_bar().encode(
    	x = 'Source/Voyage:N',
        y=alt.Y('count()', title='Nombre de patients')
    ).properties(title="Provenance des malades", height=300, width=700)

    st.write(ch3)

    # Interactive Map
    st.write("Visualisation interactive de la provenance des cas de COVID-19:")

    df3 = px.data.gapminder().query("year == 2007")
    df2 = df3[(df3['country']=="Italy") | (df3['country']=="Senegal") | (df3['country']=="United Kingdom") | (df3['country']=="France") | (df3['country']=="Spain")]

    fig = px.line_geo(df2, locations="iso_alpha",
                      projection="orthographic")

    st.plotly_chart(fig)

    # V. Population
    st.markdown("---")
    st.subheader("Population touch√©e")
    st.write("Les chiffres pr√©sent√©s ci-dessous tiennent compte des publication du Minist√®re de la Sant√© et de l'Action Sociale. Certaines donn√©es sont manquantes, et nous n'affichons que les valeurs connues √† ce jour.")

    st.write("1. L'age moyen des patients est de ", np.mean(df['Age'].dropna()), " ans")

    ch = alt.Chart(df).mark_bar().encode(
    	x = 'Age:Q',
        y=alt.Y('count()', title='Nombre de patients')
    ).properties(title="atu aji wop gii ", height=300, width=700)

    st.write(ch)

    st.write("2. La plupart des patients connus sont des hommes")

    st.write(pd.DataFrame(df[['Homme', 'Femme']].dropna().sum()).transpose())

    st.write("3. La plupart des cas sont concentr√©s √† Dakar")

    ch2 = alt.Chart(df.dropna(subset=['Ville'])).mark_bar().encode(
    	x = 'Ville:N',
        y=alt.Y('count()', title='Nombre de patients')
    ).properties(title="d√´kku waye aji wop gi", height=300, width=700)

    st.write(ch2)

    st.write("4. La plupart des personnes malades r√©sident au S√©n√©gal")

    st.write(df['Resident Senegal'].dropna().value_counts())

    st.write("5. La plupart des personnes malades r√©sident au S√©n√©gal")

    st.write(df['Resident Senegal'].dropna().value_counts())

    st.write("6. Le temps d'hospitalisation moyen pour le moment est de : ", np.mean(df['Temps Hospitalisation (j)'].dropna()), " jours")

else :

    st.header("Xibaar yu aju ci Jangor√´y Koronaa ci Senegal üá∏üá≥")

    st.sidebar.markdown("*Yeesal gu muj: 02/04/2020*")
    st.sidebar.markdown("---")
    st.sidebar.header("Ressources utiles")

    st.sidebar.markdown("Numero ngir wotee bu jamp 1: **78 172 10 81**")
    st.sidebar.markdown("Numero ngir wotee bu jamp 2: **76 765 97 31**")
    st.sidebar.markdown("Numero ngir wotee bu jamp 3: **70 717 14 92**")
    st.sidebar.markdown("Numero boye wotee tee do fayye: **800 00 50 50**")
    st.sidebar.markdown("SAMU: **1515**")
    st.sidebar.markdown("Besel ci sa telefone: **#2121#**")
    st.sidebar.markdown("[Saytul sa yarame ci Jangoroji ci Prevcovid19](http://www.prevcovid19.com/#/teste)")
    st.sidebar.markdown("[Tweetru ministre gi eub walu wergu yaram](https://twitter.com/MinisteredelaS1)")
    st.sidebar.markdown("[Booleb xeeti mbir ak m√†ndargaay jumtukaayu](https://github.com/maelfabien/COVID-19-Senegal)")
    st.sidebar.markdown("---")

    st.sidebar.header("Jokko ak wa ministere")

    st.sidebar.markdown("Ministre gi eub walu wergu yaram ak boolem boko / Fann Residence")
    st.sidebar.markdown("Rue Aim√© C√©saire, Dakar, S√©n√©gal")
    st.sidebar.markdown("+221 800 00 50 50 - contact@sante.gouv.sn")

    st.sidebar.markdown("---")
    st.sidebar.markdown("By [Ma√´l Fabien](https://maelfabien.github.io/), [Papa Sega](https://github.com/papasega/), [Dakar Institute of Technology](https://dit.sn/)")

    # I. Dataframe

    df = pd.read_csv("COVID_Senegal.csv", sep=";")
    df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)

    #st.write(df)

    evol_cases = df[['Date', 'Positif', 'Negatif', 'D√©c√©d√©', 'Gu√©ri']].groupby("Date").sum().cumsum()

    st.subheader("Ci lu gaaw")
    st.subheader("Lan m√¥y CORONAVIRUS ü¶†?")
    st.write("CORONAVIRUS d√° dajalee yaneen xeeti VIRUS yu√± m√´na w√°ll√°ntee √ßii ay nit ak ay Mala.üêÉ Li√± m√´n√´ m√¥dinee, ci d√¥mu √¢dama yi, xeetu CORONAVIRUS yi mon-na sabab tawatƒ± noy-yiü§ß y√ºy jeexital thim s√∂thie ak yeeneen x√©ti woppi noy-yi yu thiosano pe≈Ñku (MERS) andank mandargay p√∫t g√∫y meetti di xasan (SRAS). CORONA bum√∫ja f√©√± m√¥y waral tawati CORONAVIRUS √±u gu√´n k√¥ xam ci Covid-19.")

    st.subheader("Lan m√¥y Covid-19 ?")

    st.write("Covid-19 t√§watt l√§ j√∫y W√§-lee laa . D√¥mu DianGoro CORONAVIRUS b√Æ moudiee f√©√± m√¥koy sabab. D√¥mu diangoro diouyeess j√¥ju ak tawat j√¥ju xameesu l√©nwon m√¢n√¢m , keenna xamouko won la ndiague m√ºy f√©√± √ß√§ diwanu Wuhan ca s√Æn ci weeru deesabar (decembre) atum 2019.")


    total_positif = evol_cases.tail(1)['Positif'][0]
    total_negatif = evol_cases.tail(1)['Negatif'][0]
    total_decede = evol_cases.tail(1)['D√©c√©d√©'][0]
    total_geuri = evol_cases.tail(1)['Gu√©ri'][0]

    st.markdown("Limu √±i feebar: <span style='font-size:1.5em;'>%s</span>"%(total_positif - total_geuri), unsafe_allow_html=True)
    st.markdown("Limu √±i faatu: <span style='font-size:1.5em;'>%s</span>"%(total_decede), unsafe_allow_html=True)
    st.markdown("Limu √±i wer: <span style='font-size:1.5em;'>%s</span>"%(total_geuri), unsafe_allow_html=True)
    st.markdown("Dayob √±i wer: <span style='font-size:1.5em;'>%s</span>"%(np.round(total_geuri / total_positif * 100, 1)), unsafe_allow_html=True)
    st.markdown("Dayob yoqute √±i feebar bis bu ay: <span style='font-size:1.5em;'>%s</span>"%(np.round(pd.DataFrame(np.sqrt(evol_cases['Positif'].pct_change(periods=2)+1)-1).tail(1)['Positif'][0] * 100, 2)), unsafe_allow_html=True)
    st.markdown("Mboolem √±i ame Koronaa: <span style='font-size:1.5em;'>%s</span>"%(total_positif), unsafe_allow_html=True)
    st.markdown("Mboolem √±i √±u saytu te √±u m√πcc ci feebar bi: <span style='font-size:1.5em;'>%s</span>"%(total_negatif), unsafe_allow_html=True)
    st.markdown("Mboolem √±i √±u saytu: <span style='font-size:1.5em;'>%s</span>"%(total_positif + total_negatif), unsafe_allow_html=True)
    st.markdown("Dayob √±i ame feebar bi ci √±i √±u saytu: <span style='font-size:1.5em;'>%s</span>"%(np.round(total_positif / (total_positif + total_negatif) * 100, 1)), unsafe_allow_html=True)


    # II. Map
    st.markdown("---")
    st.subheader("√ëi ame feebar bi fu √±u feete")
    shapefile = 'app/ne_110m_admin_0_countries.shp'

    #Read shapefile using Geopandas
    gdf = gpd.read_file(shapefile)[['ADMIN', 'ADM0_A3', 'geometry']]
    gdf.columns = ['country', 'country_code', 'geometry']
    gdf = gdf[gdf['country']=="Senegal"]
    grid_crs=gdf.crs
    gdf_json = json.loads(gdf.to_json())
    grid = json.dumps(gdf_json)

    cities = pd.read_csv("city_coordinates.csv", index_col=0)

    def find_lat(x):
        try:
            return float(cities[cities['Ville'] == x]['Latitude'])
        except TypeError:
            return None

    def find_long(x):
        try:
            return float(cities[cities['Ville'] == x]['Longitude'])
        except TypeError:
            return None

    summary = df[['Positif', 'Ville']].groupby("Ville").sum().reset_index()
    summary['latitude'] = summary['Ville'].apply(lambda x: find_lat(x))
    summary['longitude'] = summary['Ville'].apply(lambda x: find_long(x))

    geosource = GeoJSONDataSource(geojson = grid)
    pointsource = ColumnDataSource(summary)

    hover = HoverTool(
        tooltips = [('D√´kk', '@Ville'), ('Limu √±i feebar', '@Positif')]
    )

    #Create figure object.
    p = figure(plot_height = 550 , plot_width = 700, tools=[hover, 'pan', 'wheel_zoom'])
    p.xgrid.grid_line_color = None
    p.ygrid.grid_line_color = None
    p.xaxis.visible = False
    p.yaxis.visible = False
    p.outline_line_color = None

    patch = p.patches('xs','ys', source = geosource, fill_color = '#fff7bc',
              line_color = 'black', line_width = 0.35, fill_alpha = 1, 
                    hover_fill_color="#fec44f")

    #Add patch renderer to figure. 
    patch = p.patches('xs','ys', source = geosource, fill_color = 'lightgrey',
              line_color = 'black', line_width = 0.25, fill_alpha = 1)

    p.circle('longitude','latitude',source=pointsource, size=15)

    st.bokeh_chart(p)

    # III. Map
    st.markdown("---")
    st.subheader("Yoqqute limu √±i ame Koronaa")

    st.write("Yoqqute 'Positif' mi mooy wanee √±i amee jagorogui √±eup, ak yoqqute 'Actifs' mi mooy wa√±i √±igua xamane tanee wer √±a√±u teey nataal limu √±u 'actifs'.")
    evol_cases['Actifs'] = evol_cases['Positif'] - evol_cases['Gu√©ri']

    #highlight = alt.selection(type='single', on='mouseover',fields=['value'], nearest=True)

    #chart = alt.Chart(evol_cases.reset_index()).mark_line(point=True, strokeWidth=5).encode(x='Date:T', y='Actifs:Q', tooltip='Actifs:Q').add_selection(highlight).properties(height=400, width=700)

    #chart2 = alt.Chart(evol_cases.reset_index()).mark_line(point=True, strokeWidth=5).encode(x='Date:T',y='Positif:Q',tooltip='Positif:Q').properties(height=400, width=700)


    ch0 = alt.Chart(evol_cases.reset_index()).transform_fold(
        ['Positif', 'Actifs'],
    ).mark_line(size=5, point=True).encode(
        x='Date:T',
        y='value:Q',
        color='key:N', 
        tooltip="value:Q"
    ).properties(height=400, width=700)

    st.write(ch0)
    #altair_chart(ch0)

    #st.write((chart + chart2).interactive())

    st.markdown("---")
    st.subheader("Meeng√´le ak reewu Pays-Bas")

    st.write("Senegal reewle bigua xamane tane limu w√´y d√´kkee dafa meggo ak reewu Pays-bas (lu eup Fukk ak jurrom benn million), ba taxna a meeng√´le meuna dox di digg√´nte √±aari d√´kk yooyee. Donete yoqqute Jangor√´y Koronaa gi ci reewum Senegaal la geune yeexee ci cunu jooni yalla taye, lu√±u setlu ci ni Jangoro gi di doxee diarna bayi xel wayee itameu lathena √±u xalateci bu bax. Fi gua xamenee mome leu rewu Senegaal tolu ci Jangor√´y Koronaa dafa mengo ci fukki fan ak juroom ci ginaaw fi reew mi di Pays-Bas tolone, wayee xayma gogu boye seteu juroom √±aari faneule ngir rew Pays-bas tee ci Senegaal fukki fan ak juroom √±eet. Lim yii aju ci reewu  Pays-Bas √±uguiko jeul√© ci Wikipedia: https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_the_Netherlands. ")

    df_nl = pd.read_csv("df_nl.csv")

    plt.figure(figsize=(16,10))
    plt.plot(df_nl['Netherlands'], linestyle="--", linewidth=5, label="Pays-Bas")
    plt.plot(df_nl['Senegal'],label="S√©n√©gal", linewidth=5)
    plt.figtext(.5,.9,'Yoqqute limu √±i ame Koronaa ci Senegal ak ci Pays-bas', fontsize=30, ha='center')
    plt.legend()
    st.pyplot(plt)

    # IV. Contamination
    st.markdown("---")
    st.subheader("Tassarok Jangorogui")

    st.write("√ëugui xamee √±eneu √±u jeulee Jangoroji ci √±u juguee bimeu rew, ci niit √±u feebar yigua xamen√© √±o waleu √±eni niit. Limu √±igua xamn√© √±o ameu Jangoroji tee jeul√©ko ci biir rewmi, moye waleu gi geuna ragalu ci walantee Jangoroji.")

    facteur = df[['Date', 'Facteur']].dropna()
    facteur['Count'] = 1

    st.write("Limu √±u idy jangorogui ci reewmi : ", facteur[facteur['Facteur'] == "Import√©"].groupby("Date").sum().sum()[0])
    st.write("Limu √±i jangorogui dalee ci reewmi Nombre total de cas contact: ", facteur[facteur['Facteur'] == "Contact"].groupby("Date").sum().sum()[0])
    st.write("Limu √±i ame koronaa ci aye mbollo: ", facteur[facteur['Facteur'] == "Communaut√©"].groupby("Date").sum().sum()[0])

    importe = facteur[facteur['Facteur'] == "Import√©"].groupby("Date").sum().cumsum().reset_index()
    voyage = facteur[facteur['Facteur'] == "Contact"].groupby("Date").sum().cumsum().reset_index()
    communaute = facteur[facteur['Facteur'] == "Communaut√©"].groupby("Date").sum().cumsum().reset_index()

    df_int = pd.merge(importe, voyage, left_on='Date', right_on='Date', how='outer')
    df_int = pd.merge(df_int, communaute, left_on='Date', right_on='Date', how='outer')

    df_int['Date'] = pd.to_datetime(df_int['Date'], dayfirst=True)
    df_int = df_int.sort_values("Date").ffill().fillna(0)
    df_int.columns = ["Date", "Importes", "Contact", "Communaut√©"]

    ch0 = alt.Chart(df_int).transform_fold(
        ['Importes', 'Contact', 'Communaut√©'],
    ).mark_line(size=5).encode(
        x='Date:T',
        y='value:Q',
        color='key:N'
    ).properties(height=500, width=700)

    st.altair_chart(ch0)

    st.write("√ëu dieulee Jangoroji bitimeu rew, tee waleu Jangoroji √±eneu √±u d√´kk Senegaal, √ëugui jugu√© ci rew yi  : Italie, Farass, Espaa√±, Angaleteer")

    ch3 = alt.Chart(df.dropna(subset=['Source/Voyage'])).mark_bar().encode(
        x = 'Source/Voyage:N',
        y=alt.Y('count()', title='Limu aji wopgui')
    ).properties(title="Fi aji tawategui sokeeko", height=300, width=700)

    st.write(ch3)

    # Interactive Map
    st.write("Natalu feega xamenee fila jangorey koronaa bi juguee")

    df3 = px.data.gapminder().query("year == 2007")
    df2 = df3[(df3['country']=="Italy") | (df3['country']=="Senegal") | (df3['country']=="United Kingdom") | (df3['country']=="France") | (df3['country']=="Spain")]

    fig = px.line_geo(df2, locations="iso_alpha",
                      projection="orthographic")

    st.plotly_chart(fig)

    # V. Population
    st.markdown("---")
    st.subheader("Way-d√´kk √±u feebar daleu.")
    st.write("Limyi √±u jeufediko mougui juguee ci lu minitere buye saytu lu aju ci waalu wergu yaraam di fee√±al ci aye diotaayame bess bu diot ngir xibaaree askanew Senegal lu aju ci jagor√´y koronaa bi ci Senegal.")

    st.write("1. At √±u eupe  ci yi Jangoroji di diap ", np.mean(df['Age'].dropna()), " ans")

    ch = alt.Chart(df).mark_bar().encode(
        x = 'Age:Q',
        y=alt.Y('count()', title='Limu √±i feebar')
    ).properties(title="Atu aji wop gi", height=300, width=700)

    st.write(ch)

    st.write("2. √ëu eup ci aji-wop yi aye goor la√±u")

    st.write(pd.DataFrame(df[['Homme', 'Femme']].dropna().sum()).transpose())

    st.write("3.  √ëu eupe ci √±u feebar bi diapeu ndakaru la√±u d√´kkee")

    ch2 = alt.Chart(df.dropna(subset=['Ville'])).mark_bar().encode(
        x = 'Ville:N',
        y=alt.Y('count()', title='Limu √±i feebar')
    ).properties(title="D√´kku aji wopjii", height=300, width=700)

    st.write(ch2)

    st.write("4.  √ëu eupe ci niit √±u am√© Jangoroji Senegaal la√±u d√´kk.")

    st.write(df['Resident Senegal'].dropna().value_counts())

    st.write("5. √ëu eupe ci √±u feebar bi diapeu Senegal la√±u d√´kk")

    st.write(df['Resident Senegal'].dropna().value_counts())

    st.write("6. Faan √±igua xamn√© aji wop gi ci laye teud lalu opital: ", np.mean(df['Temps Hospitalisation (j)'].dropna()), " faan")
    # V. fagaru 
    st.markdown("---")
    st.subheader("Ngir fagaru ci jangoro koron√£ bi ")
    st.write("1. N√§ ngay raxass s√§y loxo ak ndox ak saabu ak oddu sawel bamu sett üëå ")
    st.write("2. N√§ ngay moytu saafanto bubari bi si waxtu wiiü§ù")
    st.write("3. N√§ ngay faral di √±andu ak di tisli si mussuw√°r")
    st.write("4. D√´ll moytu di l√°l s√§yy b√´t,üëÄ wala sunu gu√´m√´√±üëÑ wala s√§ bak√§nüëÉüèΩ")
    st.write("5. Na√±iy moytu didajalo don mb√¥l√¥üë®‚Äçüë©‚Äçüë¶‚Äçüë¶")
    st.write("6.Na√±uy faral didiw sel hydro alcolique sisunuy loxo")


